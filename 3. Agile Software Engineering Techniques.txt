# 3. AGILE SOFTWARE ENGINEERING TECHNIQUES
------------------------------------------

* Extreme Programming (XP)
--------------------------
. Weekly Cycle

. Customer 

. Developers

. Implementation

. Quarterly Cycle (Opportunity for the team to reflect on themselves)

. Developers

. Stories 

. Whole Team (The team is cross-functional just like in Scrum)

. Energized Work (XP programmers work in situ with minimum barriers to communication)

. Informative Workspace 


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* XP execution
--------------
. XP teams do test-first development

. XP teams do incremental design

. XP practices include a quick build process of 10 minutes or less

. XP teams use pair programming

. XP teams use continuous integration

. XP teams use process called slack (XP teams should have a few low priority tasks in their weekly and quarterly work queue)

. Many agile teams combine XP practices with Scrum


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Pair Programming
------------------
I - Shaped: Deep Knowledge (!!!!GAZPROM PROJECT) --> VITALIY TOP PERFORMER

T - Shaped: Deep Knowledge, Wider Knowledge (!!!!GAZPROM PROJECT) --> OTHER MEMBERS OF THE TEAM


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Test-driven development (TDD)
-------------------------------
1. Write a test that fails.

2. Write enough code to compile.

3. Complete code to meet requirements of test.

. Can expose poorly designed monolithic code

. Testers have no bias toward code and often find defects that developers miss

. Ability to bypass or mock dependencies or functions and only focus on code for specific test

	. Mockito
	. PowerMock
	. MOQ
	. Others

. Code coverage is the percentage of total code being executed by tests

. Achieving 100% code coverage is challenging

. Code coverage goals should be included in team's definition of done (!!!!GAZPROM PROJECT --> THINK ABOUT THE IMPLEMENTATION OF THIS)

. Recommend starting with low percentage and ramp up up to 100% at team's pace

. Automated unit testing should be part of continuous build process


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* User stories
--------------

Example
-------
As a fitness club member, 
I should be able to view my payment story 
so I know how I am being billed.

User Categories
---------------
Example
-------
(Fitness club app)

. Club member
. Potential club member
. Potential club employee
. Fitness instructor
. Fitness club manager

Example of conditions of satisfaction
-------------------------------------
User should be able to view payments made in the last two years. 

	* Conditions of satisfaction --> Define the criteria that must be met for the product owner to accept the story. (!!!GAZPROM PROJECT)

	* REMEMBER THAT EACH USER'S STORY IS A PROMISE FOR A CONVERSATION BETWEEN BUSINESS STAKEHOLDERS LIKE THE PRODUCT OWNER, AND DEVELOPMENT TEAMS. (!!!GAZPROM PROJECT)

* The three C's of User Stories
-------------------------------
. Card

. Collaboration

. Confirmation


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Epics and themes
------------------
* An epic is a large user story

* It represents a business workflow or process and is too large to be estimated

Example
-------
As a Fitness Club Manager, I should be able to set up a new club member account.


* Themes
--------
A way of grouping user stories

Themes are attributes of user stories

Example
-------
Payments,	Personal Information


	* USER STORIES ARE THE STANDARD FOR REQUIREMENT ANALYSIS FOR AGILE TEAMS (!!!GAZPROM PROJECT)

	* IF YOU CAN'T EXPRESS USER STORIES ON AN INDEX CARD, THAT'S PROBABLY AN EPIC (!!!GAZPROM PROJECT)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile estimation
------------------
	* AGILE ESTIMATION IS ALL ABOUT REFININIG PRODUCT BACKLOG ITEMS INTO SMALLER IMPLEMENTABLE ITEMS AND THEM ESTIMATING WHAT IT TAKES TO CONVERT THAT BACKLOG ITEM INTO A DONE ITEM.
	(!!!GAZPROM PROJECT)

	* AGILE ESTIMATES ARE PROVIDED BY THE DEVELOPMENT TEAM MEMBERS, THEY ARE NOT IMPOSED BY THE MANAGERS.

* Absolute Units
----------------
This is the type of estimation traditionally used by product managers.

Depends on the level of skills of the developers.

* Relative Units
----------------
More easy for agreement.

	. Fibonacci Series
	------------------
	0, 1, 2, 3, 5, 8, 13 --> These numbers are used to rank the difficulty and scope of product backlog items.

	. Exponential Scale
	-------------------
	0, 1, 2, 4, 8, 16    --> 

	. oo --> Too large to estimate

	. 0 --> Already done or easily completed

	* THE USE OF FIBONACCI SERIES AND EXPONENTIAL SERIES IS ALIGNED WITH THE FACT THAT AS WORK ITEMS GET BIGGER, AND MORE COMPLEX, THE UNCERTAINTY ASSOCIATED WITH THE IMPLEMENTATION
	INCREASES.

	* XS > S > M > L > XL
	---------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Planning poker
----------------
Technique for relative estimation.

(!!!GAZPROM PROJECT - VERY IMPORTANT)

Example
-------
As a potential club member, I should be able to sign up as a trial member and print a temporary badge so I can try the fitness center facilities.

	* THE TEAM ASK CLARIFYING QUESTIONS ABOUT THE PRODUCT BACKLOG ITEM TO THE PRODUCT OWNER.

1) Agile estimation is based on consensus

2) Agile team members estimate work independently and are not influenced by others

3) Agile estimation is a conversation starter that helps to clarify requirements

. Don't spend time trying to reach the perfect estimate.

. Use empiricism

. Time-box the estimation session

. Team should perform an exercise to group work items by size

. Do not estimate items with a large relative size (usually eight or higher)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* DevOps: The problem
---------------------
Helps organizations to improve their agility and significantly reduce time to market for their products.

Le'ts see what is the problem that DevOps helps to solve:


* Typical Deployment
--------------------
		BUSINESS ----> DEVELOPMENT ----> QA ----> IT OPERATIONS ----> PRODUCTION


	* IT OPERATIONS SEE FREQUENT PRODUCT INCREMENTS AS A NIGHTMARE, BECAUSE NOW THE CHANGES THAT WOULD BREAK INFRASTRUCTURE ARE BEING PUSHED MORE FREQUENTLY.

	* THIS IS THE PROBLEM THAT DEVOPS ATTEMPTS TO SOLVE


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* DevOps: The solution 
----------------------
. Culture of close cooperation between developers and QA teams: (Dev) and IT operations teams (Ops)

. Requires a change in organizational mindset

. Supported by processes and tools

. Reduces lead time from feature requirements to deployment for faster user feedback


* Continuous Integration (CI)
-----------------------------
Practice of frequently commiting changes to the source code.


* Continuous Delivery (CD)
--------------------------
Capability to keep product stable after every change so that it is always shippable


* Continuous Deployment
-----------------------
Automatically deploying product increment to productio or production like environment.


. Agile and DevOps complement each other

. Requires a cultural change by the organization to implement successfully


	* THE ORGANIZATION MUST TO TRANSITION AWAY FROM MANUAL STEPS, SILOS, AND HADOFFS AND INTRODUCE CLOSER COOPERATION BETWEEN DEVELOPERS AND IT TEAMS WITH IMPROVED AUTOMATION 
	AND COLLECTIVE RESPONSIBILITY OF THE DEPLOYMENT PIPELINE (!!!!GAZPROM PROJECT)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile reporting
-----------------
. Burndown charts

. Burnup charts

. Cumulative flow diagrams


* Tools
-------
Visual Studio Team Services


	* THE MOST IMPORTANT IS THAT ALL THE TEAM MEMBERS HAVE TRANSPARENCY ON THE STATE OF THE PROJECT.


------------------------------------------------------------------------------------------------------------------------------------------------------------------







































































	
	





	































































