# 3. AGILE SOFTWARE ENGINEERING TECHNIQUES
------------------------------------------

* Extreme Programming (XP)
--------------------------
. Weekly Cycle

. Customer 

. Developers

. Implementation

. Quarterly Cycle (Opportunity for the team to reflect on themselves)

. Developers

. Stories 

. Whole Team (The team is cross-functional just like in Scrum)

. Energized Work (XP programmers work in situ with minimum barriers to communication)

. Informative Workspace 


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* XP execution
--------------
. XP teams do test-first development

. XP teams do incremental design

. XP practices include a quick build process of 10 minutes or less

. XP teams use pair programming

. XP teams use continuous integration

. XP teams use process called slack (XP teams should have a few low priority tasks in their weekly and quarterly work queue)

. Many agile teams combine XP practices with Scrum


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Pair Programming
------------------
I - Shaped: Deep Knowledge (!!!!GAZPROM PROJECT) --> VITALIY TOP PERFORMER

T - Shaped: Deep Knowledge, Wider Knowledge (!!!!GAZPROM PROJECT) --> OTHER MEMBERS OF THE TEAM


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Test-driven development (TDD)
-------------------------------
1. Write a test that fails.

2. Write enough code to compile.

3. Complete code to meet requirements of test.

. Can expose poorly designed monolithic code

. Testers have no bias toward code and often find defects that developers miss

. Ability to bypass or mock dependencies or functions and only focus on code for specific test

	. Mockito
	. PowerMock
	. MOQ
	. Others

. Code coverage is the percentage of total code being executed by tests

. Achieving 100% code coverage is challenging

. Code coverage goals should be included in team's definition of done (!!!!GAZPROM PROJECT --> THINK ABOUT THE IMPLEMENTATION OF THIS)

. Recommend starting with low percentage and ramp up up to 100% at team's pace

. Automated unit testing should be part of continuous build process


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* User stories
--------------

Example
-------
As a fitness club member, 
I should be able to view my payment story 
so I know how I am being billed.

User Categories
---------------
Example
-------
(Fitness club app)

. Club member
. Potential club member
. Potential club employee
. Fitness instructor
. Fitness club manager

Example of conditions of satisfaction
-------------------------------------
User should be able to view payments made in the last two years. 

	* Conditions of satisfaction --> Define the criteria that must be met for the product owner to accept the story. (!!!GAZPROM PROJECT)

	* REMEMBER THAT EACH USER'S STORY IS A PROMISE FOR A CONVERSATION BETWEEN BUSINESS STAKEHOLDERS LIKE THE PRODUCT OWNER, AND DEVELOPMENT TEAMS. (!!!GAZPROM PROJECT)

* The three C's of User Stories
-------------------------------
. Card

. Collaboration

. Confirmation


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Epics and themes
------------------
* An epic is a large user story

* It represents a business workflow or process and is too large to be estimated

Example
-------
As a Fitness Club Manager, I should be able to set up a new club member account.


* Themes
--------
A way of grouping user stories

Themes are attributes of user stories

Example
-------
Payments,	Personal Information


	* USER STORIES ARE THE STANDARD FOR REQUIREMENT ANALYSIS FOR AGILE TEAMS (!!!GAZPROM PROJECT)

	* IF YOU CAN'T EXPRESS USER STORIES ON AN INDEX CARD, THAT'S PROBABLY AN EPIC (!!!GAZPROM PROJECT)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile estimation
------------------
	* AGILE ESTIMATION IS ALL ABOUT REFININIG PRODUCT BACKLOG ITEMS INTO SMALLER IMPLEMENTABLE ITEMS AND THEM ESTIMATING WHAT IT TAKES TO CONVERT THAT BACKLOG ITEM INTO A DONE ITEM.
	(!!!GAZPROM PROJECT)

	* AGILE ESTIMATES ARE PROVIDED BY THE DEVELOPMENT TEAM MEMBERS, THEY ARE NOT IMPOSED BY THE MANAGERS.

* Absolute Units
----------------
This is the type of estimation traditionally used by product managers.

Depends on the level of skills of the developers.

* Relative Units
----------------
More easy for agreement.

	. Fibonacci Series
	------------------
	0, 1, 2, 3, 5, 8, 13 --> These numbers are used to rank the difficulty and scope of product backlog items.

	. Exponential Scale
	-------------------
	0, 1, 2, 4, 8, 16    --> 

	. oo --> Too large to estimate

	. 0 --> Already done or easily completed

	* THE USE OF FIBONACCI SERIES AND EXPONENTIAL SERIES IS ALIGNED WITH THE FACT THAT AS WORK ITEMS GET BIGGER, AND MORE COMPLEX, THE UNCERTAINTY ASSOCIATED WITH THE IMPLEMENTATION
	INCREASES.

	* XS > S > M > L > XL
	---------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Planning poker
----------------

	
	





	































































