# 4. KANBAN FOR DEVELOPERS
--------------------------

* Lean History
--------------
Origin of Kanban ---> Lean Manufacturing Principles ---> (Toyota Production System)

INVENTORY ---> Aligning ---> Production Rate			Consumption Rate

* Little's Law
--------------

	L = L'W (L' = lambda)

	Average Number of Customers (L) = Arrival Rate (L') x Average Time Spent (W)


* Example:
----------
	
	L(4) = Lambda(8) * W(0.5) 


* Little's Law in Software Development (!!!! GAZPROM PROJECT ---> THIS IS VERY IMPORTANT FOR OUR PROJECT !!!!)
--------------------------------------

	L = L'W
	
	Work in Progress (L) = Completion Rate(L') x Cycle Time (W)


* Cycle Time
------------
Cycle time is the total time of a work item:

	Analysis	Design		Implementation		Deployment 


The idea is to minimize cycle time, because we want to produce valuable software faster.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Kanban board
--------------

* Kanban
--------
Japanese:

Kan = Visual

Ban = Card


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Limiting work in progress (WIP)  (!!!! GAZPROM PROJECT ---> THIS IS VERY IMPORTANT FOR OUR PROJECT !!!!)
---------------------------------

WHEN WE WORK IN MORE THAN ONE ITEM WE ARE STILL ONLY WORKING ON ONE ITEM AT A GIVEN POINT IN TIME. WE SWITCH BETWEEN ITEMS, AND ITS SWITCH CAUSES A LOSS IN PRODUCTIVITY, BECAUSE IT TAKES
TIME TO BE FULLY PRODUCTIVE ON THE SECOND TASK.

	* HUMANS ARE NOT PRODUCTIVE AT TASK SWITCHING LIKE COMPUTERS.

	* TOO MANY WORK ITEMS CAUSES DISTRACTIONS AND LOWERS PRODUCTIVITY.

* LIMITING WIP
--------------
. Firstly we need to have something to work on, when the only item in a column (For example the “In progress” column, is blocked.

. Not all steps in a process are equal in duration.  Steps that are lower in duration may delay items that comes from previous faster steps.


------------------------------------------------------------------------------------------------------------------------------------------------------------------



































































